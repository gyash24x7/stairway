model User {
  id            String   @id @default(cuid(2))
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions Session[]
  accounts Account[]

  @@map("auth_users")
  @@schema("auth")
}

model Session {
  id        String   @id @default(cuid(2))
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("auth_sessions")
  @@schema("auth")
}

model Account {
  id                    String    @id @default(cuid(2))
  userId                String
  providerId            String
  accountId             String
  refreshToken          String?
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_accounts")
  @@schema("auth")
}

model Verification {
  id         String   @id @default(cuid(2))
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("auth_verifications")
  @@schema("auth")
}

enum CallBreakStatus {
  CREATED
  IN_PROGRESS
  COMPLETED

  @@schema("callbreak")
}

model CallBreakGame {
  id        String          @id @default(cuid())
  code      String          @unique
  dealCount Int             @default(5)
  trumpSuit String
  status    CallBreakStatus @default(CREATED)
  createdBy String
  /// ![Array<Record<string, number>>]
  scores    Json            @default("[]")

  players      CallBreakPlayer[]
  deals        CallBreakDeal[]
  cardMappings CallBreakCardMapping[]
  rounds       CallBreakRound[]

  @@map("clbk_games")
  @@schema("callbreak")
}

model CallBreakPlayer {
  id     String  @default(cuid())
  name   String
  avatar String
  gameId String
  isBot  Boolean @default(false)

  game         CallBreakGame          @relation(fields: [gameId], references: [id])
  cardMappings CallBreakCardMapping[]

  @@id([id, gameId])
  @@map("clbk_players")
  @@schema("callbreak")
}

model CallBreakDeal {
  id           String          @default(cuid())
  gameId       String
  playerOrder  String[]
  /// ![Record<string, number>]
  declarations Json            @default("{}")
  /// ![Record<string, number>]
  wins         Json            @default("{}")
  turnIdx      Int             @default(0)
  status       CallBreakStatus @default(CREATED)
  createdAt    DateTime        @default(now())

  game         CallBreakGame          @relation(fields: [gameId], references: [id])
  cardMappings CallBreakCardMapping[]
  rounds       CallBreakRound[]

  @@id([id, gameId])
  @@map("clbk_deals")
  @@schema("callbreak")
}

model CallBreakCardMapping {
  cardId   String
  dealId   String
  gameId   String
  playerId String

  deal   CallBreakDeal   @relation(fields: [dealId, gameId], references: [id, gameId])
  game   CallBreakGame   @relation(fields: [gameId], references: [id])
  player CallBreakPlayer @relation(fields: [playerId, gameId], references: [id, gameId])

  @@id([cardId, dealId, gameId])
  @@map("clbk_card_mappings")
  @@schema("callbreak")
}

model CallBreakRound {
  id          String   @default(cuid())
  gameId      String
  dealId      String
  winner      String?
  playerOrder String[]
  /// ![Record<string, string>]
  cards       Json     @default("{}")
  turnIdx     Int      @default(0)
  suit        String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())

  deal CallBreakDeal @relation(fields: [dealId, gameId], references: [id, gameId])
  game CallBreakGame @relation(fields: [gameId], references: [id])

  @@id([id, dealId, gameId])
  @@map("clbk_rounds")
  @@schema("callbreak")
}

model LiteraturePlayer {
  id     String  @default(cuid())
  name   String
  avatar String
  gameId String
  teamId String?
  isBot  Boolean @default(false)

  game          LiteratureGame           @relation(fields: [gameId], references: [id])
  team          LiteratureTeam?          @relation(fields: [teamId], references: [id])
  cardMappings  LiteratureCardMapping[]
  cardLocations LiteratureCardLocation[]
  asks          LiteratureAsk[]
  calls         LiteratureCall[]
  transfers     LiteratureTransfer[]

  @@id([id, gameId])
  @@map("lit_players")
  @@schema("literature")
}

model LiteratureTeam {
  id        String   @id @default(cuid())
  name      String
  score     Int      @default(0)
  setsWon   String[] @default([])
  memberIds String[]
  gameId    String

  members LiteraturePlayer[]
  game    LiteratureGame     @relation(fields: [gameId], references: [id])

  @@map("lit_teams")
  @@schema("literature")
}

model LiteratureCardMapping {
  cardId   String
  gameId   String
  playerId String

  game   LiteratureGame   @relation(fields: [gameId], references: [id])
  player LiteraturePlayer @relation(fields: [playerId, gameId], references: [id, gameId])

  @@id([gameId, cardId])
  @@map("lit_card_mappings")
  @@schema("literature")
}

model LiteratureCardLocation {
  cardId    String
  gameId    String
  playerId  String
  playerIds String[]
  weight    Int

  game   LiteratureGame   @relation(fields: [gameId], references: [id])
  player LiteraturePlayer @relation(fields: [playerId, gameId], references: [id, gameId])

  @@id([gameId, playerId, cardId])
  @@map("lit_card_locations")
  @@schema("literature")
}

model LiteratureAsk {
  id          String   @id @default(cuid())
  gameId      String
  playerId    String
  timestamp   DateTime @default(now())
  description String
  success     Boolean
  cardId      String
  askedFrom   String

  game   LiteratureGame   @relation(fields: [gameId], references: [id])
  player LiteraturePlayer @relation(fields: [playerId, gameId], references: [id, gameId])

  @@map("lit_asks")
  @@schema("literature")
}

model LiteratureCall {
  id          String   @id @default(cuid())
  gameId      String
  playerId    String
  timestamp   DateTime @default(now())
  description String
  success     Boolean
  cardSet     String

  /// ![Record<string, string>]
  actualCall Json

  /// ![Record<string, string>]
  correctCall Json

  game   LiteratureGame   @relation(fields: [gameId], references: [id])
  player LiteraturePlayer @relation(fields: [playerId, gameId], references: [id, gameId])

  @@map("lit_calls")
  @@schema("literature")
}

model LiteratureTransfer {
  id          String   @id @default(cuid())
  gameId      String
  playerId    String
  timestamp   DateTime @default(now())
  description String
  success     Boolean  @default(true)
  transferTo  String

  game   LiteratureGame   @relation(fields: [gameId], references: [id])
  player LiteraturePlayer @relation(fields: [playerId, gameId], references: [id, gameId])

  @@map("lit_transfers")
  @@schema("literature")
}

enum LiteratureGameStatus {
  CREATED
  PLAYERS_READY
  TEAMS_CREATED
  IN_PROGRESS
  COMPLETED

  @@schema("literature")
}

model LiteratureGame {
  id          String               @id @default(cuid())
  code        String               @unique
  status      LiteratureGameStatus @default(CREATED)
  playerCount Int                  @default(6)
  currentTurn String
  lastMoveId  String               @default("")

  players       LiteraturePlayer[]
  teams         LiteratureTeam[]
  cardMappings  LiteratureCardMapping[]
  cardLocations LiteratureCardLocation[]
  asks          LiteratureAsk[]
  calls         LiteratureCall[]
  transfers     LiteratureTransfer[]

  @@map("lit_games")
  @@schema("literature")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../generated"
  previewFeatures = ["prismaSchemaFolder", "multiSchema"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "literature", "wordle", "callbreak"]
}

model WordleGame {
  id             String   @id @default(cuid())
  playerId       String
  wordLength     Int      @default(5)
  wordCount      Int      @default(1)
  words          String[]
  guesses        String[]
  completedWords String[]

  @@map("wdl_games")
  @@schema("wordle")
}
