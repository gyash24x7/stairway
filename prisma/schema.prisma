generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

datasource db {
    provider = "postgresql"
    url      = env("PG_DB_URL")
    schemas  = ["auth", "literature"]
}

model User {
    id       String  @id @default(cuid())
    name     String
    email    String  @unique
    avatar   String
    password String
    salt     String
    verified Boolean @default(false)

    @@map("users")
    @@schema("auth")
}

model LiteraturePlayer {
    id     String
    name   String
    avatar String
    gameId String
    game   LiteratureGame          @relation(fields: [gameId], references: [id])
    cards  LiteratureCardMapping[]
    team   LiteratureTeam?         @relation(fields: [teamId], references: [id])
    teamId String?

    @@id([id, gameId])
    @@map("players")
    @@schema("literature")
}

model LiteratureTeam {
    id      String             @id @default(cuid())
    name    String
    gameId  String
    game    LiteratureGame     @relation(fields: [gameId], references: [id])
    score   Int                @default(0)
    setsWon String[]
    members LiteraturePlayer[]

    @@map("teams")
    @@schema("literature")
}

enum LiteratureGameStatus {
    CREATED
    PLAYERS_READY
    TEAMS_CREATED
    IN_PROGRESS
    COMPLETED

    @@schema("literature")
}

enum LiteratureMoveType {
    ASK_CARD
    CALL_SET
    TRANSFER_CHANCE

    @@map("move_type")
    @@schema("literature")
}

model LiteratureMove {
    id          String             @default(cuid())
    gameId      String
    game        LiteratureGame     @relation(fields: [gameId], references: [id])
    type        LiteratureMoveType
    data        Json
    success     Boolean
    timestamp   DateTime           @default(now())
    description String

    @@id([id, gameId])
    @@map("moves")
    @@schema("literature")
}

model LiteratureCardMapping {
    cardId   String
    gameId   String
    game     LiteratureGame   @relation(fields: [gameId], references: [id])
    playerId String
    player   LiteraturePlayer @relation(fields: [playerId, gameId], references: [id, gameId])

    @@id([cardId, gameId])
    @@map("card_mappings")
    @@schema("literature")
}

model LiteratureGame {
    id           String                  @id @default(cuid())
    code         String                  @unique
    status       LiteratureGameStatus    @default(CREATED)
    playerCount  Int                     @default(2)
    players      LiteraturePlayer[]
    teams        LiteratureTeam[]
    cardMappings LiteratureCardMapping[]
    moves        LiteratureMove[]
    currentTurn  String                  @default("")

    @@map("games")
    @@schema("literature")
}
