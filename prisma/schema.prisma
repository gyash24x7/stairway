generator client {
	provider        = "prisma-client-js"
	previewFeatures = ["multiSchema"]
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
	schemas  = ["auth", "literature"]
}

model User {
	id       String  @id @default(cuid())
	name     String
	email    String  @unique
	avatar   String
	password String
	salt     String
	verified Boolean @default(false)

	@@map("users")
	@@schema("auth")
}

model LiteratureInference {
	gameId                String
	playerId              String
	game                  LiteratureGame   @relation(fields: [gameId], references: [id])
	player                LiteraturePlayer @relation(fields: [playerId, gameId], references: [id, gameId])
	activeSets            Json
	actualCardLocations   Json
	possibleCardLocations Json
	inferredCardLocations Json

	@@id([gameId, playerId])
	@@unique([playerId, gameId])
	@@map("inferences")
	@@schema("literature")
}

model LiteraturePlayer {
	id        String                  @default(cuid())
	name      String
	avatar    String
	gameId    String
	game      LiteratureGame          @relation(fields: [gameId], references: [id])
	cards     LiteratureCardMapping[]
	team      LiteratureTeam?         @relation(fields: [teamId], references: [id])
	teamId    String?
	isBot     Boolean                 @default(false)
	inference LiteratureInference?

	@@id([id, gameId])
	@@map("players")
	@@schema("literature")
}

model LiteratureTeam {
	id      String             @id @default(cuid())
	name    String
	gameId  String
	game    LiteratureGame     @relation(fields: [gameId], references: [id])
	score   Int                @default(0)
	setsWon String[]
	members LiteraturePlayer[]

	@@map("teams")
	@@schema("literature")
}

model LiteratureMove {
	id          String         @default(cuid())
	gameId      String
	game        LiteratureGame @relation(fields: [gameId], references: [id])
	type        String
	data        Json
	success     Boolean
	timestamp   DateTime       @default(now())
	description String

	@@id([id, gameId])
	@@map("moves")
	@@schema("literature")
}

model LiteratureCardMapping {
	cardId   String
	gameId   String
	game     LiteratureGame   @relation(fields: [gameId], references: [id])
	playerId String
	player   LiteraturePlayer @relation(fields: [playerId, gameId], references: [id, gameId])

	@@id([cardId, gameId])
	@@map("card_mappings")
	@@schema("literature")
}

model LiteratureGame {
	id           String                  @id @default(cuid())
	code         String                  @unique
	status       String                  @default("CREATED")
	playerCount  Int                     @default(6)
	players      LiteraturePlayer[]
	teams        LiteratureTeam[]
	cardMappings LiteratureCardMapping[]
	moves        LiteratureMove[]
	inferences   LiteratureInference[]
	currentTurn  String                  @default("")

	@@map("games")
	@@schema("literature")
}
